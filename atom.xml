<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靳懿的个人博客</title>
  
  <subtitle>xxmyjk</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.github.pub/"/>
  <updated>2019-05-01T14:23:58.825Z</updated>
  <id>https://blog.github.pub/</id>
  
  <author>
    <name>靳懿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>零基础入门深度学习 - Menu</title>
    <link href="https://blog.github.pub/2019/05/01/deeplearning-quickstart-menu/"/>
    <id>https://blog.github.pub/2019/05/01/deeplearning-quickstart-menu/</id>
    <published>2019-05-01T14:09:47.000Z</published>
    <updated>2019-05-01T14:23:58.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列文章全文转载自作业部落 <a href="https://www.zybuluo.com/hanbingtao/note/433855" target="_blank" rel="noopener">@hanbingtao</a> 老师的零基础入门系列文章.<br>由于作业部落没有很好的索引相关功能, 转载于个人博客, 重新做了排工作, 版权归原作者所有.</p></blockquote><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><ul><li><p><a href="/2019/05/01/deeplearning-quickstart-1/">零基础入门深度学习(1) - 感知器</a></p></li><li><p>零基础入门深度学习(2) - 线性单元和梯度下降</p></li><li><p>零基础入门深度学习(3) - 神经网络和反向传播算法</p></li><li><p>零基础入门深度学习(4) - 卷积神经网络</p></li><li><p>零基础入门深度学习(5) - 循环神经网络</p></li><li><p>零基础入门深度学习(6) - 长短时记忆网络(LSTM)</p></li><li><p>零基础入门深度学习(7) - 递归神经网络</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本系列文章全文转载自作业部落 &lt;a href=&quot;https://www.zybuluo.com/hanbingtao/note/433855&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@hanbingtao&lt;/a&gt; 老师的零基
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://blog.github.pub/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习入门" scheme="https://blog.github.pub/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>转载 - 零基础入门深度学习(1) - 感知器</title>
    <link href="https://blog.github.pub/2019/05/01/deeplearning-quickstart-1/"/>
    <id>https://blog.github.pub/2019/05/01/deeplearning-quickstart-1/</id>
    <published>2019-05-01T05:10:42.000Z</published>
    <updated>2019-05-01T14:56:52.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/upload-images.jianshu.io/upload_images/2256672-06627c71f0d8c0dc.jpg" alt></p><blockquote><p>无论即将到来的是大数据时代还是人工智能时代，亦或是传统行业使用人工智能在云上处理大数据的时代，作为一个有理想有追求的程序员，不懂深度学习（Deep Learning）这个超热的技术，会不会感觉马上就out了？现在救命稻草来了，《零基础入门深度学习》系列文章旨在讲帮助爱编程的你从零基础达到入门级水平。零基础意味着你不需要太多的数学知识，只要会写程序就行了，没错，这是专门为程序员写的文章。虽然文中会有很多公式你也许看不懂，但同时也会有更多的代码，程序员的你一定能看懂的（我周围是一群狂热的Clean Code程序员，所以我写的代码也不会很差）。</p></blockquote><h2 id="深度学习是啥"><a href="#深度学习是啥" class="headerlink" title="深度学习是啥"></a>深度学习是啥</h2><p>在人工智能领域，有一个方法叫机器学习。在机器学习这个方法里，有一类算法叫神经网络。神经网络如下图所示：</p><a id="more"></a><p><img src="/static/upload-images.jianshu.io/upload_images/2256672-c6f640c11a06ac2e.png" alt></p><p>上图中每个圆圈都是一个神经元，每条线表示神经元之间的连接。我们可以看到，上面的神经元被分成了多层，层与层之间的神经元有连接，而层内之间的神经元没有连接。最左边的层叫做 <strong>输入层</strong> ，这层负责接收输入数据；最右边的层叫 <strong>输出层</strong> ，我们可以从这层获取神经网络输出数据。输入层和输出层之间的层叫做 <strong>隐藏层</strong> 。</p><p>隐藏层比较多（大于2）的神经网络叫做深度神经网络。而深度学习，就是使用深层架构（比如，深度神经网络）的机器学习方法。</p><p>那么深层网络和浅层网络相比有什么优势呢？简单来说深层网络能够表达力更强。事实上，一个仅有一个隐藏层的神经网络就能拟合任何一个函数，但是它需要很多很多的神经元。而深层网络用少得多的神经元就能拟合同样的函数。也就是为了拟合一个函数，要么使用一个浅而宽的网络，要么使用一个深而窄的网络。而后者往往更节约资源。</p><p>深层网络也有劣势，就是它不太容易训练。简单的说，你需要大量的数据，很多的技巧才能训练好一个深层网络。这是个手艺活。</p><h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><p>看到这里，如果你还是一头雾水，那也是很正常的。为了理解神经网络，我们应该先理解神经网络的组成单元—— <strong>神经元</strong> 。神经元也叫做 <strong>感知器</strong> 。感知器算法在上个世纪50-70年代很流行，也成功解决了很多问题。并且，感知器算法也是非常简单的。</p><h3 id="感知器的定义"><a href="#感知器的定义" class="headerlink" title="感知器的定义"></a>感知器的定义</h3><p>下图是一个感知器：</p><p><img src="/static/upload-images.jianshu.io/upload_images/2256672-801d65e79bfc3162.png" alt></p><p>可以看到，一个感知器有如下组成部分：</p><ul><li><p><strong>输入权值</strong> 一个感知器可以接收多个输入 $(x_1, x_2, \dots, x_n | x_i \in \Re)$，每个输入上有一个 <strong>权值</strong> $w_i \in \Re$，此外还有一个 <strong>偏置项</strong> $b \in \Re$ ，就是上图中的 $w_0$ 。</p></li><li><p><strong>激活函数</strong> 感知器的激活函数可以有很多选择，比如我们可以选择下面这个<strong>阶跃函数</strong> $f$ 来作为激活函数：</p></li></ul><script type="math/tex; mode=display">f(z)=\begin{cases}1 \quad z\gt 0 \\\\0 \quad othercase \\\end{cases}\tag{1}</script><ul><li><strong>输出</strong> 感知器的输出由下面这个公式来计算</li></ul><script type="math/tex; mode=display">y = f(w \bullet x + b)\tag{公式1}</script><p>如果看完上面的公式一下子就晕了，不要紧，我们用一个简单的例子来帮助理解。</p><h4 id="例子：用感知器实现and函数"><a href="#例子：用感知器实现and函数" class="headerlink" title="例子：用感知器实现and函数"></a>例子：用感知器实现<code>and</code>函数</h4><p>我们设计一个感知器，让它来实现<code>and</code>运算。程序员都知道，<code>and</code>是一个二元函数（带有两个参数 $x_1$ 和 $x_2$），下面是它的 <strong>真值表</strong>：</p><div class="table-container"><table><thead><tr><th>$x_1$</th><th>$x_2$</th><th>$y$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>为了计算方便，我们用0表示 <strong>false</strong> ，用1表示 <strong>true</strong> 。这没什么难理解的，对于C语言程序员来说，这是天经地义的。</p><p>我们令 $w_1 = 0.5; w_2 = 0.5; b = -0.8$，而激活函数 $f$ 就是前面写出来的 <strong>阶跃函数</strong> ，这时，感知器就相当于<code>and</code>函数。不明白？我们验算一下：</p><p>输入上面真值表的第一行，即$x_1 = 0; x_2 = 0$，那么根据公式(1)，计算输出： </p><script type="math/tex; mode=display">\begin{align*}y &= f(w \bullet x + b)\tag{2} \\&= f(w_1 x_1 + w_2 x_2 + b )\tag{3} \\&= f(0.5 \times 0 + 0.5 \times 0 - 0.8)\tag{4} \\&= f(-0.8)\tag{5} \\&= 0\tag{6}\end{align*}</script><p>也就是当 $x_1 x_2$ 都为0的时候，$y$ 为0，这就是 <strong>真值表</strong> 的第一行。读者可以自行验证上述真值表的第二、三、四行。</p><h4 id="例子：用感知器实现or函数"><a href="#例子：用感知器实现or函数" class="headerlink" title="例子：用感知器实现or函数"></a>例子：用感知器实现<code>or</code>函数</h4><p>同样，我们也可以用感知器来实现<code>or</code>运算。仅仅需要把偏置项 $b$ 的值设置为-0.3就可以了。我们验算一下，下面是<code>or</code>运算的 <strong>真值表</strong> ：</p><div class="table-container"><table><thead><tr><th>$x_1$</th><th>$x_2$</th><th>$y$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>我们来验算第二行，这时的输入是 $x_1 = 0; x_2 = 1$ ，带入公式(1)：</p><script type="math/tex; mode=display">\begin{align*}y &= f(w \bullet x + b)\tag{7} \\&= f(w_1 x_1 + w_2 x_2 + b )\tag{8} \\&= f(0.5 \times 0 + 0.5 \times 1 - 0.3)\tag{9} \\&= f(0.2)\tag{10} \\&= 1\tag{11}\end{align*}</script><p>也就是当 $x_1 = 0; x_2 = 1$ 时， $y$ 为1，即<code>or</code> <strong>真值表</strong> 第二行。读者可以自行验证其它行。</p><h3 id="感知器还能做什么"><a href="#感知器还能做什么" class="headerlink" title="感知器还能做什么"></a>感知器还能做什么</h3><p>事实上，感知器不仅仅能实现简单的布尔运算。它可以拟合任何的线性函数，任何 <strong>线性分类</strong> 或 <strong>线性回归</strong> 问题都可以用感知器来解决。前面的布尔运算可以看作是 <strong>二分类</strong> 问题，即给定一个输入，输出0（属于分类0）或1（属于分类1）。如下面所示，<code>and</code>运算是一个线性分类问题，即可以用一条直线把分类0（false，红叉表示）和分类1（true，绿点表示）分开。</p><p><img src="/static/upload-images.jianshu.io/upload_images/2256672-acff576747ef4259.png" alt></p><p>然而，感知器却不能实现异或运算，如下图所示，异或运算不是线性的，你无法用一条直线把分类0和分类1分开。</p><p><img src="/static/upload-images.jianshu.io/upload_images/2256672-9b651d237936781c.png" alt></p><h3 id="感知器的训练"><a href="#感知器的训练" class="headerlink" title="感知器的训练"></a>感知器的训练</h3><p>现在，你可能困惑前面的权重项和偏置项的值是如何获得的呢？这就要用到感知器训练算法：将权重项和偏置项初始化为0，然后，利用下面的 <strong>感知器规则</strong> 迭代的修改 $w_i$ 和 $b$ ，直到训练完成。</p><script type="math/tex; mode=display">\begin{align*}w_i &\gets w_i + \Delta w_i \tag{12} \\b &\gets b + \Delta b \tag{13}\end{align*}</script><p>其中: </p><script type="math/tex; mode=display">\begin{align*}\Delta w_i &= \eta(t-y)x_i \tag{14} \\\Delta b &= \eta(t-y) \tag{15}\end{align*}</script><p> $w_i$ 是与输入 $x_i$ 对应的权重项， $b$ 是偏置项。事实上，可以把 $b$ 看作是值永远为1的输入 $x_b$ 所对应的权重。 $t$ 是训练样本的<code>实际值</code>，一般称之为<code>label</code>。而是 $y$ 感知器的输出值，它是根据 <strong>公式(1)</strong> 计算得出。 $\eta$ 是一个称为 <strong>学习速率</strong> 的常数，其作用是控制每一步调整权的幅度。</p><p>每次从训练数据中取出一个样本的输入向量 $\mathrm{x}$ ，使用感知器计算其输出 $y$，再根据上面的规则来调整权重。每处理一个样本就调整一次权重。经过多轮迭代后（即全部的训练数据被反复处理多轮），就可以训练出感知器的权重，使之实现目标函数。</p><h4 id="编程实战：实现感知器"><a href="#编程实战：实现感知器" class="headerlink" title="编程实战：实现感知器"></a>编程实战：实现感知器</h4><blockquote><p>完整代码请参考GitHub: <a href="https://github.com/hanbt/learn_dl/blob/master/perceptron.py" target="_blank" rel="noopener">https://github.com/hanbt/learn_dl/blob/master/perceptron.py</a> (python2.7)</p></blockquote><p>对于程序员来说，没有什么比亲自动手实现学得更快了，而且，很多时候一行代码抵得上千言万语。接下来我们就将实现一个感知器。</p><p>下面是一些说明：</p><ul><li>使用python语言。python在机器学习领域用的很广泛，而且，写python程序真的很轻松。</li><li>面向对象编程。面向对象是特别好的管理复杂度的工具，应对复杂问题时，用面向对象设计方法很容易将复杂问题拆解为多个简单问题，从而解救我们的大脑。</li><li>没有使用numpy。numpy实现了很多基础算法，对于实现机器学习算法来说是个必备的工具。但为了降低读者理解的难度，下面的代码只用到了基本的python（省去您去学习numpy的时间）。</li></ul><p>下面是感知器类的实现，非常简单。去掉注释只有27行，而且还包括为了美观（每行不超过60个字符）而增加的很多换行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_num, activator)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        初始化感知器，设置输入参数的个数，以及激活函数。</span></span><br><span class="line"><span class="string">        激活函数的类型为double -&gt; double</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.activator = activator</span><br><span class="line">        <span class="comment"># 权重向量初始化为0</span></span><br><span class="line">        self.weights = [<span class="number">0.0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(input_num)]</span><br><span class="line">        <span class="comment"># 偏置项初始化为0</span></span><br><span class="line">        self.bias = <span class="number">0.0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        打印学习到的权重、偏置项</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'weights\t:%s\nbias\t:%f\n'</span> % (self.weights, self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, input_vec)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入向量，输出感知器的计算结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 把input_vec[x1,x2,x3...]和weights[w1,w2,w3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,w1),(x2,w2),(x3,w3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用map函数计算[x1*w1, x2*w2, x3*w3]</span></span><br><span class="line">        <span class="comment"># 最后利用reduce求和</span></span><br><span class="line">        <span class="keyword">return</span> self.activator(</span><br><span class="line">            reduce(<span class="keyword">lambda</span> a, b: a + b,</span><br><span class="line">                   map(<span class="keyword">lambda</span> (x, w): x * w,  </span><br><span class="line">                       zip(input_vec, self.weights))</span><br><span class="line">                , <span class="number">0.0</span>) + self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, input_vecs, labels, iteration, rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(iteration):</span><br><span class="line">            self._one_iteration(input_vecs, labels, rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one_iteration</span><span class="params">(self, input_vecs, labels, rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        一次迭代，把所有的训练数据过一遍</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 把输入和输出打包在一起，成为样本的列表[(input_vec, label), ...]</span></span><br><span class="line">        <span class="comment"># 而每个训练样本是(input_vec, label)</span></span><br><span class="line">        samples = zip(input_vecs, labels)</span><br><span class="line">        <span class="comment"># 对每个样本，按照感知器规则更新权重</span></span><br><span class="line">        <span class="keyword">for</span> (input_vec, label) <span class="keyword">in</span> samples:</span><br><span class="line">            <span class="comment"># 计算感知器在当前权重下的输出</span></span><br><span class="line">            output = self.predict(input_vec)</span><br><span class="line">            <span class="comment"># 更新权重</span></span><br><span class="line">            self._update_weights(input_vec, output, label, rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_weights</span><span class="params">(self, input_vec, output, label, rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        按照感知器规则更新权重</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 把input_vec[x1,x2,x3,...]和weights[w1,w2,w3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,w1),(x2,w2),(x3,w3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用感知器规则更新权重</span></span><br><span class="line">        delta = label - output</span><br><span class="line">        self.weights = map(</span><br><span class="line">            <span class="keyword">lambda</span> (x, w): w + rate * delta * x,</span><br><span class="line">            zip(input_vec, self.weights))</span><br><span class="line">        <span class="comment"># 更新bias</span></span><br><span class="line">        self.bias += rate * delta</span><br></pre></td></tr></table></figure><p>接下来，我们利用这个感知器类去实现<code>and</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    定义激活函数f</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    基于and真值表构建训练数据</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 构建训练数据</span></span><br><span class="line">    <span class="comment"># 输入向量列表</span></span><br><span class="line">    input_vecs = [[<span class="number">1</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># 期望的输出列表，注意要与输入一一对应</span></span><br><span class="line">    <span class="comment"># [1,1] -&gt; 1, [0,0] -&gt; 0, [1,0] -&gt; 0, [0,1] -&gt; 0</span></span><br><span class="line">    labels = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> input_vecs, labels    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_perceptron</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    使用and真值表训练感知器</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 创建感知器，输入参数个数为2（因为and是二元函数），激活函数为f</span></span><br><span class="line">    p = Perceptron(<span class="number">2</span>, f)</span><br><span class="line">    <span class="comment"># 训练，迭代10轮, 学习速率为0.1</span></span><br><span class="line">    input_vecs, labels = get_training_dataset()</span><br><span class="line">    p.train(input_vecs, labels, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">    <span class="comment">#返回训练好的感知器</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    <span class="comment"># 训练and感知器</span></span><br><span class="line">    and_perception = train_and_perceptron()</span><br><span class="line">    <span class="comment"># 打印训练获得的权重</span></span><br><span class="line">    <span class="keyword">print</span> and_perception</span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'1 and 1 = %d'</span> % and_perception.predict([<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'0 and 0 = %d'</span> % and_perception.predict([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'1 and 0 = %d'</span> % and_perception.predict([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'0 and 1 = %d'</span> % and_perception.predict([<span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>将上述程序保存为perceptron.py文件，通过命令行执行这个程序，其运行结果为：</p><p><img src="/static/upload-images.jianshu.io/upload_images/2256672-1e66158656366b57.png" alt></p><p>神奇吧！感知器竟然完全实现了<code>and</code>函数。读者可以尝试一下利用感知器实现其它函数。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>终于看（写）到小结了…，大家都累了。对于零基础的你来说，走到这里应该已经很烧脑了吧。没关系，休息一下。值得高兴的是，你终于已经走出了深度学习入门的第一步，这是巨大的进步；坏消息是，这仅仅是最简单的部分，后面还有无数艰难险阻等着你。不过，你学的困难往往意味着别人学的也困难，掌握一门高门槛的技艺，进可糊口退可装逼，是很值得的。</p><p>下一篇文章，我们将讨论另外一种感知器： <strong>线性单元</strong> ，并由此引出一种可能是最最重要的优化算法： <strong>梯度下降</strong> 算法。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Tom M. Mitchell, “机器学习”, 曾华军等译, 机械工业出版社</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/static/upload-images.jianshu.io/upload_images/2256672-06627c71f0d8c0dc.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论即将到来的是大数据时代还是人工智能时代，亦或是传统行业使用人工智能在云上处理大数据的时代，作为一个有理想有追求的程序员，不懂深度学习（Deep Learning）这个超热的技术，会不会感觉马上就out了？现在救命稻草来了，《零基础入门深度学习》系列文章旨在讲帮助爱编程的你从零基础达到入门级水平。零基础意味着你不需要太多的数学知识，只要会写程序就行了，没错，这是专门为程序员写的文章。虽然文中会有很多公式你也许看不懂，但同时也会有更多的代码，程序员的你一定能看懂的（我周围是一群狂热的Clean Code程序员，所以我写的代码也不会很差）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;深度学习是啥&quot;&gt;&lt;a href=&quot;#深度学习是啥&quot; class=&quot;headerlink&quot; title=&quot;深度学习是啥&quot;&gt;&lt;/a&gt;深度学习是啥&lt;/h2&gt;&lt;p&gt;在人工智能领域，有一个方法叫机器学习。在机器学习这个方法里，有一类算法叫神经网络。神经网络如下图所示：&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.github.pub/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="转载" scheme="https://blog.github.pub/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="机器学习" scheme="https://blog.github.pub/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习入门" scheme="https://blog.github.pub/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>解决 &quot;Failed to Initialize NVML: Driver/library Version Mismatch&quot;</title>
    <link href="https://blog.github.pub/2019/04/24/resolve-NVML-driver-version-mismatch/"/>
    <id>https://blog.github.pub/2019/04/24/resolve-NVML-driver-version-mismatch/</id>
    <published>2019-04-24T07:25:47.000Z</published>
    <updated>2019-04-24T09:45:55.450Z</updated>
    
    <content type="html"><![CDATA[<p>服务器更新 <code>nvidia driver</code> 后遇到以下问题:</p><p><code>Failed to initialize NVML: Driver/library version mismatch</code></p><h2 id="一句话解决方案"><a href="#一句话解决方案" class="headerlink" title="一句话解决方案:"></a>一句话解决方案:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># su 权限</span></span><br><span class="line">lsmod | grep -i ^nvidia | awk <span class="string">'&#123;print $1&#125;'</span> | rmmod &amp;&amp; nvidia-smi</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 雾</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析:"></a>原因分析:</h2><p>驱动更新后 linux 内核对应驱动的 kernel module 并没有重置, 外部相关进程引用了旧版本驱动相关的 mod, 需要手动卸载, 重新执行 <code>nvidia-smi</code><br>会自动加载新版本 mod 到内核</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>卸载过程可能会因为相关进程引用或者内核 mod 引用顺序导致卸载失败, 这时需要按照提示顺序卸载.</p><a id="more"></a><p>比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmmod nvidia</span><br><span class="line">&gt; rmmod: ERROR: Module nvidia is <span class="keyword">in</span> use by: nvidia_modeset nvidia_uvm</span><br></pre></td></tr></table></figure><p>这时就需要先卸载<code>nvidia_modeset</code> 和 <code>nvidia_uvm</code></p><p>一些相关的 <code>kernel mod</code> 命令</p><ul><li>查看进程引用 <code>mod</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -n -w /dev/nvidia</span><br></pre></td></tr></table></figure><ul><li>kernel mod 卸载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmmod &lt;module_name&gt; | modprobe -r &lt;module_name&gt;</span><br></pre></td></tr></table></figure><ul><li>kernel mod 加载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch" target="_blank" rel="noopener">stackoverflow</a></li><li><a href="https://comzyh.com/blog/archives/967/" target="_blank" rel="noopener">Comzyh的博客</a></li><li><a href="https://wiki.archlinux.org/index.php/Kernel_module" target="_blank" rel="noopener">archlinux</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器更新 &lt;code&gt;nvidia driver&lt;/code&gt; 后遇到以下问题:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Failed to initialize NVML: Driver/library version mismatch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;一句话解决方案&quot;&gt;&lt;a href=&quot;#一句话解决方案&quot; class=&quot;headerlink&quot; title=&quot;一句话解决方案:&quot;&gt;&lt;/a&gt;一句话解决方案:&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# su 权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsmod | grep -i ^nvidia | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt; | rmmod &amp;amp;&amp;amp; nvidia-smi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 雾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; class=&quot;headerlink&quot; title=&quot;原因分析:&quot;&gt;&lt;/a&gt;原因分析:&lt;/h2&gt;&lt;p&gt;驱动更新后 linux 内核对应驱动的 kernel module 并没有重置, 外部相关进程引用了旧版本驱动相关的 mod, 需要手动卸载, 重新执行 &lt;code&gt;nvidia-smi&lt;/code&gt;&lt;br&gt;会自动加载新版本 mod 到内核&lt;/p&gt;
&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;卸载过程可能会因为相关进程引用或者内核 mod 引用顺序导致卸载失败, 这时需要按照提示顺序卸载.&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://blog.github.pub/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="https://blog.github.pub/tags/linux/"/>
    
      <category term="nvidia" scheme="https://blog.github.pub/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>支持 GPU 调度的 Kubernetes 部署方案(CentOS)</title>
    <link href="https://blog.github.pub/2019/04/16/install-k8s-cluster-with-gpu-support/"/>
    <id>https://blog.github.pub/2019/04/16/install-k8s-cluster-with-gpu-support/</id>
    <published>2019-04-16T07:12:47.000Z</published>
    <updated>2019-05-01T13:37:58.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-installation"><a href="#docker-installation" class="headerlink" title="docker installation"></a>docker installation</h2><ul><li><p>optional: clean old version if needed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce \</span><br><span class="line">                  docker-ce-cli \</span><br><span class="line">                  containerd.io</span><br></pre></td></tr></table></figure></li><li><p>install yum utils</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>add docker-ce repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>install docker-ce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>optional: setup docker <code>data-root</code></p></li></ul><p><code>dockerd</code> store <code>images/caches/volumes ...</code> data in <code>/var/lib/docker</code> by default, and the <code>kuberntes</code> will GC docker<br>image NOT CURRENT IN USING, change the <code>data-root</code> to a large disk portion.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">&gt; append --data-root &lt;a large disk portion&gt; behind dockerd Exec</span><br></pre></td></tr></table></figure><h2 id="nvidia-docker-nvidia-container-runtime-installation"><a href="#nvidia-docker-nvidia-container-runtime-installation" class="headerlink" title="nvidia-docker | nvidia-container-runtime installation"></a>nvidia-docker | nvidia-container-runtime installation</h2><ul><li><p>add nvidia-docker repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | \</span><br><span class="line">  sudo tee /etc/yum.repos.d/nvidia-docker.repo</span><br></pre></td></tr></table></figure></li><li><p>install nvidia-docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br></pre></td></tr></table></figure></li><li><p>modify <code>/etc/docker/daemon.json</code> to enable <code>nvidia</code> as default docker runtime</p></li><li><p>optional: setup your own <code>shadowsocks server &amp; client &amp; privoxy</code></p></li><li><p>modify <code>/usr/lib/systemd/system/docker.server</code> to enable docker image pull access to <code>gcr.io</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Environment=&quot;HTTP_PROXY=x.x.x.x:xx;HTTPS_PROXY=x.x.x.x:xx;NO_PROXY=x.x.x.x:xx&quot;</span><br></pre></td></tr></table></figure><h2 id="kubernetes-stack-installation-local-kubelet"><a href="#kubernetes-stack-installation-local-kubelet" class="headerlink" title="kubernetes stack installation (local kubelet)"></a>kubernetes stack installation (local kubelet)</h2><ul><li>optional: remove outdated kubeadm, kubelet, kubectl</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove -y kubeadm kubelet kubectl</span><br></pre></td></tr></table></figure><ul><li><p><code>kubelet</code>, <code>kubectl</code>, <code>kubeadm</code> install</p><blockquote><p>follow <a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">here</a></p></blockquote></li><li><p>using <code>kubeadm</code> to install <code>HA</code> cluster</p><blockquote><p>follow <a href="https://kubernetes.io/docs/setup/independent/setup-ha-etcd-with-kubeadm/" target="_blank" rel="noopener">here</a></p></blockquote></li></ul><h2 id="kubernetes-stack-installation-rke-gt-stack-in-docker"><a href="#kubernetes-stack-installation-rke-gt-stack-in-docker" class="headerlink" title="kubernetes stack installation (rke -&gt; stack in docker)"></a>kubernetes stack installation (rke -&gt; stack in docker)</h2><ul><li><p>install <a href="https://github.com/rancher/rke" target="_blank" rel="noopener">rke</a></p></li><li><p>rke up</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line"><span class="attr">    - address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span></span><br><span class="line"><span class="attr">      user:</span> <span class="string">jinyi</span></span><br><span class="line"><span class="attr">      role:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">controlplane</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">etcd</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">worker</span></span><br><span class="line"><span class="attr">    - address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span></span><br><span class="line"><span class="attr">      user:</span> <span class="string">jinyi</span></span><br><span class="line"><span class="attr">      role:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">controlplane</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">etcd</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">worker</span></span><br><span class="line"><span class="attr">    - address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.16</span></span><br><span class="line"><span class="attr">      user:</span> <span class="string">jinyi</span></span><br><span class="line"><span class="attr">      role:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">controlplane</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">etcd</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">worker</span></span><br></pre></td></tr></table></figure><ul><li>more config <a href="https://rancher.com/docs/rke/latest/en/" target="_blank" rel="noopener">here</a></li></ul><h2 id="apply-services-amp-conf-to-cluster"><a href="#apply-services-amp-conf-to-cluster" class="headerlink" title="apply services &amp; conf to cluster"></a>apply services &amp; conf to cluster</h2><h3 id="kubernetes-dashboard"><a href="#kubernetes-dashboard" class="headerlink" title="kubernetes-dashboard"></a>kubernetes-dashboard</h3><ul><li>apply stable <code>kubernetes-dashboard</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><ul><li>create <code>admin role binding</code> (local only for security)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">` | kubectl apply -f -</span><br></pre></td></tr></table></figure><ul><li>get <code>dashboard login token</code> &amp; login to dashboard</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secrets admin-user | grep token:</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy the output token to clipboard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start local proxy</span></span><br><span class="line">kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># open in bro</span></span><br></pre></td></tr></table></figure><ul><li><p>open in browser <a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" target="_blank" rel="noopener">kubernetes-dashboard</a></p></li><li><p>enter <code>token</code> you copy before &amp; login</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker-installation&quot;&gt;&lt;a href=&quot;#docker-installation&quot; class=&quot;headerlink&quot; title=&quot;docker installation&quot;&gt;&lt;/a&gt;docker installation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;optional: clean old version if needed&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum remove docker \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-common \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-engine \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-ce \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-ce-cli \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  containerd.io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;install yum utils&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add docker-ce repo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum-config-manager \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --add-repo \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    https://download.docker.com/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://blog.github.pub/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="kubernetes" scheme="https://blog.github.pub/tags/kubernetes/"/>
    
      <category term="linux" scheme="https://blog.github.pub/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Css中清除浮动的几种方式</title>
    <link href="https://blog.github.pub/2016/10/26/clear-float-of-ul/"/>
    <id>https://blog.github.pub/2016/10/26/clear-float-of-ul/</id>
    <published>2016-10-26T10:22:15.000Z</published>
    <updated>2016-10-26T10:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端使用 <code>ul &gt; li</code> + <code>float</code> 方式生成一个 <code>navbar</code> 是一种常见的页面展示手段, 但是浮动之后会导致<code>ul</code>高度无法正常撑起, 所以需要清除浮动以正常撑起父元素高度. 这里介绍几种常见的浮动清除的方式.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="给ul添加高度"><a href="#给ul添加高度" class="headerlink" title="给ul添加高度"></a>给ul添加高度</h3><pre><code>这个是最直接的方法, 给`ul`元素添加一个高度<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="给最后一个li后添加一个-空的-div-给div添加clear-both样式"><a href="#给最后一个li后添加一个-空的-div-给div添加clear-both样式" class="headerlink" title="给最后一个li后添加一个 空的 div, 给div添加clear: both样式"></a>给最后一个li后添加一个 <strong>空的</strong> <code>div</code>, 给<code>div</code>添加<code>clear: both</code>样式</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="给ul添加overflow-hidden-zoom-1样式"><a href="#给ul添加overflow-hidden-zoom-1样式" class="headerlink" title="给ul添加overflow: hidden; zoom: 1样式"></a>给ul添加<code>overflow: hidden; zoom: 1</code>样式</h3><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="使用-ul-伪类-进行浮动清除-对ul添加class-quot-clearfix-quot"><a href="#使用-ul-伪类-进行浮动清除-对ul添加class-quot-clearfix-quot" class="headerlink" title="使用 ul 伪类 进行浮动清除, 对ul添加class=&quot;clearfix&quot;"></a>使用 ul <strong>伪类</strong> 进行浮动清除, 对<code>ul</code>添加<code>class=&quot;clearfix&quot;</code></h3><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="http://www.tuicool.com/articles/3iuaMzn" target="_blank" rel="noopener">推酷</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端使用 &lt;code&gt;ul &amp;gt; li&lt;/code&gt; + &lt;code&gt;float&lt;/code&gt; 方式生成一个 &lt;code&gt;navbar&lt;/code&gt; 是一种常见的页面展示手段, 但是浮动之后会导致&lt;code&gt;ul&lt;/code&gt;高度无法正常撑起, 所以需要清除浮动以正常撑起父元素高度. 这里介绍几种常见的浮动清除的方式.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;list-style-type&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://blog.github.pub/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://blog.github.pub/tags/css/"/>
    
      <category term="浮动" scheme="https://blog.github.pub/tags/%E6%B5%AE%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs版本更新记录</title>
    <link href="https://blog.github.pub/2016/10/19/nodejs-versions-update-mark-md/"/>
    <id>https://blog.github.pub/2016/10/19/nodejs-versions-update-mark-md/</id>
    <published>2016-10-19T03:28:32.000Z</published>
    <updated>2016-10-19T03:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>v6今天LTS, 官方pending了半个多月今天终于up了. 记录一下node主要版本更新内容, 方便选择. 关于官方进度及相关版本计划可以参考<a href="https://github.com/nodejs/lts" target="_blank" rel="noopener">这里</a>, 看起来现在用<code>V4</code> 和 <code>V6</code> 是明智的, <code>V5</code>还是放弃吧.</p><h2 id="v4-x"><a href="#v4-x" class="headerlink" title="v4.x"></a>v4.x</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v4 更新</span><br><span class="line">1. 模板字符串</span><br><span class="line">2. 类语法糖</span><br><span class="line">3. 箭头函数</span><br><span class="line">4. 对象字面量</span><br><span class="line">5. Promise</span><br><span class="line">6. 新的字符串方法</span><br><span class="line">7. let 和 const</span><br></pre></td></tr></table></figure><h2 id="v6-x"><a href="#v6-x" class="headerlink" title="v6.x"></a>v6.x</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nodejs更新主要新特性</span><br><span class="line">1. 默认函数参数</span><br><span class="line">2. 展开操作符</span><br><span class="line">3. 解构赋值</span><br><span class="line">4. new.target</span><br><span class="line">5. Proxy, 原生对象</span><br><span class="line">6. Reflect, 原生对象</span><br><span class="line">7. Symbol, 原生对象</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://wwsun.github.io/posts/upgrade-to-node-v4.html" target="_blank" rel="noopener">v4</a></li><li><a href="http://www.tuicool.com/articles/bqmiU3q" target="_blank" rel="noopener">v6</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;v6今天LTS, 官方pending了半个多月今天终于up了. 记录一下node主要版本更新内容, 方便选择. 关于官方进度及相关版本计划可以参考&lt;a href=&quot;https://github.com/nodejs/lts&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux服务器安全设置</title>
    <link href="https://blog.github.pub/2016/03/18/linux-server-setting/"/>
    <id>https://blog.github.pub/2016/03/18/linux-server-setting/</id>
    <published>2016-03-18T06:25:23.000Z</published>
    <updated>2016-09-20T09:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>简明的linux服务器安全设置指南, 包括: 公钥登录, 禁止密码登录, 禁用 root 账户等.</p><p>公司的阿里云主机常年被 ssh 外加 http 各种扫, 除了一方面写出更加安全, 健壮的代码之外, 另一方面服务器的安全设置也不容忽视.<br>下面是我自己常用的服务器端相关配置. 阿里云主机, centOS 6.x.</p><h2 id="账户设置"><a href="#账户设置" class="headerlink" title="账户设置"></a>账户设置</h2><p>添加公共账户, 避免直接使用 root 账户.<br>阿里云的主机默认只提供了一个 root 账户, 我们需要添加一个工作账户, 并赋予 root 权限, 避免直接使用 root.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd devops         //添加 devops 账户</span><br><span class="line">passwd devops          //修改 devops 账户密码</span><br><span class="line">useradd -G root devops //添加 devops 到 root 用户组</span><br></pre></td></tr></table></figure><p>这样我们就拥有了一个 root 权限的账户, 接下来就是禁止 root 账户的 shell 登录和使用.</p><a id="more"></a><p>由于我们以后不会再使用密码登录, 并且要禁止 root 的 shell 登录. 所以, 在禁用之前, 需要先配置好公钥文件, 防止无法正常登录服务器.</p><ol><li>生成密钥(ssh-keygen)</li><li>复制公钥到服务器(ssh-copy-id)</li><li><p>修改 ssh server 配置文件, 允许公钥认证, sudo vi /etc/ssh/sshd_config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes       //开启RSA 及公钥认证</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure></li><li><p>修改服务器端文件夹的拥有者及权限, 权限设置是必须的, 否则不能正常识别公钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown -R devops:devops .ssh         //修改.ssh 文件夹的拥有者</span><br><span class="line">chmod 700 .ssh                      //修改文件夹权限为700,必须</span><br><span class="line">chmod 600 .ssh/authorized_keys      //修改文件权限为600,必须</span><br><span class="line">sudo services sshd restart          //重启 ssh 服务</span><br></pre></td></tr></table></figure></li></ol><p>接下来进行 ssh 登录测试, 如果正常登录且未提示输入密码, 证明我们的公钥配置已经生效, 这个时候就可以大胆的关闭 root 账户登录和账户登录的密码验证了.<br>sudo vi /etc/ssh/sshd_config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no          //禁止 root 用户登录</span><br><span class="line">PasswordAuthentication no   //禁用密码验证</span><br></pre></td></tr></table></figure><h2 id="端口设置及-iptables"><a href="#端口设置及-iptables" class="headerlink" title="端口设置及 iptables"></a>端口设置及 iptables</h2><p>除了做到以上的还不能确保足够的安全, 我们需要对服务器的端口进行限定开放.</p><p>我司服务器目前对外开放端口只有80, 443, 22三个端口, 即除了 ssh, http, https 之外, 不对外部开放任何端口.有需要可以修改 ssh 默认端口号, sudo vi /etc/ssh/sshd_config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port xx</span><br></pre></td></tr></table></figure></p><p>这个配置可以在阿里云的控制面板内进行设置, 当然本地进行设置也是一样的道理.</p><p>由于阿里云的机房内不是一台机器, 也就是说尽管我们的主机没有暴露在外网环境下, 但是阿里云的内网内部还是可以扫描到我们的服务器的.所以,<br>我们还需要使用 iptables 对内网 ip 进行限制.</p><p>我司在阿里有两台服务器, 分布在同一个内网环境, 所以除了两者之间互访之外, 屏蔽所有其他的内网互访. 这个在阿里云主机的控制面板也是可以设置的, iptables 同理.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>防火墙保持常开, 定时备份, 磁盘加密, 及时查 ssh 和 http 的相关 log, 发现可疑情况及时处理.<br>另, 对于 http 层可以在 nginx 接入层设置 ip 黑名单进行屏蔽.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简明的linux服务器安全设置指南, 包括: 公钥登录, 禁止密码登录, 禁用 root 账户等.&lt;/p&gt;
&lt;p&gt;公司的阿里云主机常年被 ssh 外加 http 各种扫, 除了一方面写出更加安全, 健壮的代码之外, 另一方面服务器的安全设置也不容忽视.&lt;br&gt;下面是我自己常用的服务器端相关配置. 阿里云主机, centOS 6.x.&lt;/p&gt;
&lt;h2 id=&quot;账户设置&quot;&gt;&lt;a href=&quot;#账户设置&quot; class=&quot;headerlink&quot; title=&quot;账户设置&quot;&gt;&lt;/a&gt;账户设置&lt;/h2&gt;&lt;p&gt;添加公共账户, 避免直接使用 root 账户.&lt;br&gt;阿里云的主机默认只提供了一个 root 账户, 我们需要添加一个工作账户, 并赋予 root 权限, 避免直接使用 root.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useradd devops         //添加 devops 账户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;passwd devops          //修改 devops 账户密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd -G root devops //添加 devops 到 root 用户组&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样我们就拥有了一个 root 权限的账户, 接下来就是禁止 root 账户的 shell 登录和使用.&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://blog.github.pub/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="安全" scheme="https://blog.github.pub/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="linux" scheme="https://blog.github.pub/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置访问限制</title>
    <link href="https://blog.github.pub/2016/03/17/Nginx-secret-limit-setting/"/>
    <id>https://blog.github.pub/2016/03/17/Nginx-secret-limit-setting/</id>
    <published>2016-03-17T05:40:24.000Z</published>
    <updated>2016-09-20T09:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ngxin 时添加IP访问控制是常见需求, 最近遇到该需求, 简单记录如下.</p><h2 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h2><p> nginx 的 IP 访问控制依赖于内置的 <code>ngx_http_access_module</code>. 在默认情况下, 这个包在编译中是安装的, 除非编译过程中显示指定<code>--without ngx_http_access_module</code>.</p><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>样例配置如下, example.conf<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span>  <span class="number">192.168.1.1</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">10.1.1.0</span>/<span class="number">16</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">2001</span>:0db8::/<span class="number">32</span>;</span><br><span class="line">    <span class="attribute">deny</span>  all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>写完之后 include 到配置文件即可<br><code>include /path/to/your_conf/*.conf;</code><br>PS: 记得加分号, <code>;</code></p><p>nginx 对于匹配顺序有如下规定: 任何一个 IP 地址, 访问了该 location 之后, 则<code>从上到下</code>对规则进行匹配, <code>漏斗</code>原则~ . ~ .<br>举例如下:</p><ul><li><code>192.168.1.1</code>: 进入之后匹配到第一个<code>IP/IP 段</code>, 则执行对应的规则 <code>deny</code>, 返回.</li><li><code>192.168.1.12</code>: 进入之后第一个未匹配, 跳过; 匹配到第二个, 执行对应规则 <code>allow</code>, 返回.</li><li><code>172.168.1.101</code>: 进入之后前四个都未匹配到, 匹配最后一个 <code>all</code>, 执行 <code>deny</code>, 返回.</li></ul><h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: (allow|deny) address | CIDR | unix: | all</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, limit_except</span><br></pre></td></tr></table></figure><p>语法设置可以为 <code>allow|deny</code> 两个关键字, 后面的对应属性可以为 IP 地址/地址段(可以使ipv4 或者 ipv6), CIRD(见<a href="#tip1">附1</a>), <code>unix:</code>, <code>all</code>, 无默认值.<br>配置模块可以出现在 nginx 的 <code>http{}</code>, <code>server{}</code>, <code>location{}</code>, <code>limit_except{}</code> 模块.<br>如果属性值配置为<code>unix:</code>, 则会允许或拒绝所有 Unix 域socket.(该选项只在 nginx 1.5.1之后的版本生效)</p><h2 id="可用的第三方配置模块"><a href="#可用的第三方配置模块" class="headerlink" title="可用的第三方配置模块"></a>可用的第三方配置模块</h2><p> nginx 只提供了简单的静态 IP 控制, 不过在服务端接入层用于做长效黑名单控制已经足够了, 如果针对访问控制进行动态规则调整, 我找到了<code>这货</code><br> <a href="https://github.com/codehunte/ngx_white_black_list/blob/master/white_black_list.txt&#39;" target="_blank" rel="noopener">ngx_white_black_list</a></p><p>简单说到这里, 其实还是挺简单的, 注意理一下匹配规则.</p><ul><li><a href="#tip1">附1</a>:</li></ul><p><code>无类别域间路由</code></p><blockquote><p>无类别域间路由（Classless Inter-Domain Routing、CIDR）是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。<br>在域名系统出现之后的第一个十年里，基于分类网络进行地址分配和路由IP数据包的设计就已明显显得可扩充性不足 （参见RFC 1517）。为了解决这个问题，互联网工程工作小组在1993年发布了一新系列的标准——RFC 1518和RFC 1519——以定义新的分配IP地址块和路由IPv4数据包的方法。<br>一个IP地址包含两部分：标识网络的前缀和紧接着的在这个网络内的主机地址。在之前的分类网络中，IP地址的分配把IP地址的32位按每8位为一段分开。这使得前缀必须为8，16或者24位。因此，可分配的最小的地址块有256（24位前缀，8位主机地址，28=256）个地址，而这对大多数企业来说太少了。大一点的地址块包含65536（16位前缀，16位主机，216=65536）个地址，而这对大公司来说都太多了。这导致不能充分使用IP地址和在路由上的不便，因为大量的需要单独路由的小型网络（C类网络）因在地域上分得很开而很难进行聚合路由，于是给路由设备增加了很多负担。</p></blockquote><p>&lt;</p><blockquote><p>无类别域间路由是基于可变长子网掩码（VLSM）来进行任意长度的前缀的分配的。在RFC 950（1985）中有关于可变长子网掩码的说明。CIDR包括：<br>指定任意长度的前缀的可变长子网掩码技术。遵从CIDR规则的地址有一个后缀说明前缀的位数，例如：192.168.0.0/16。这使得对日益缺乏的IPv4地址的使用更加有效。<br>将多个连续的前缀聚合成超网，以及，在互联网中，只要有可能，就显示为一个聚合的网络，因此在总体上可以减少路由表的表项数目。聚合使得互联网的路由表不用分为多级，并通过VLSM逆转“划分子网”的过程。<br>根据机构的实际需要和短期预期需要而不是分类网络中所限定的过大或过小的地址块来管理IP地址的分配的过程。<br>因为在IPv6中也使用了IPv4的用后缀指示前缀长度的CIDR，所以IPv4中的分类在IPv6中已不再使用。</p></blockquote><p>&lt;</p><blockquote><p>摘自维基百科: <a href="&#39;https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1&#39;">无类别域间路由</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ngxin 时添加IP访问控制是常见需求, 最近遇到该需求, 简单记录如下.&lt;/p&gt;
&lt;h2 id=&quot;模块依赖&quot;&gt;&lt;a href=&quot;#模块依赖&quot; class=&quot;headerlink&quot; title=&quot;模块依赖&quot;&gt;&lt;/a&gt;模块依赖&lt;/h2&gt;&lt;p&gt; nginx 的 IP 访问控制依赖于内置的 &lt;code&gt;ngx_http_access_module&lt;/code&gt;. 在默认情况下, 这个包在编译中是安装的, 除非编译过程中显示指定&lt;code&gt;--without ngx_http_access_module&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;配置方法&quot;&gt;&lt;a href=&quot;#配置方法&quot; class=&quot;headerlink&quot; title=&quot;配置方法&quot;&gt;&lt;/a&gt;配置方法&lt;/h2&gt;&lt;p&gt;样例配置如下, example.conf&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;location&lt;/span&gt; / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deny&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;192.168.1.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168.1.0&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.1.1.0&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;:0db8::/&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deny&lt;/span&gt;  all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://blog.github.pub/tags/nginx/"/>
    
      <category term="运维" scheme="https://blog.github.pub/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="安全" scheme="https://blog.github.pub/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2016读书单</title>
    <link href="https://blog.github.pub/2016/03/10/2016-reading-list/"/>
    <id>https://blog.github.pub/2016/03/10/2016-reading-list/</id>
    <published>2016-03-10T08:37:18.000Z</published>
    <updated>2019-05-01T13:37:54.304Z</updated>
    
    <content type="html"><![CDATA[<p>2016年新年读书计划, 准备深入学习JavaScript 的前端和后端开发, 大致了解一下 web 开发周围的相关知识.</p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><p>  http 协议的深入了解, nginx 开发相关, web 安全相关<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 图解 http</span><br><span class="line">* http 权威指南</span><br><span class="line">* 跟我学 Nginx + Lua 开发</span><br><span class="line">* Programming in Lua 3ed</span><br><span class="line">* 白帽子讲 web 安全</span><br></pre></td></tr></table></figure></p><h2 id="web-前端相关"><a href="#web-前端相关" class="headerlink" title="web 前端相关"></a>web 前端相关</h2><p>  html&amp;css 深入理解, bootstrap 框架, JavaScript 深入学习<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* html5 与 css3 基础教程</span><br><span class="line">* css 禅意花园</span><br><span class="line">* css 权威指南</span><br><span class="line">* 深入理解 bootstrap</span><br><span class="line">* JavaScript 高级程序设计(第三版)</span><br><span class="line">* JavaScript 启示录</span><br><span class="line">* JavaScript 语言精粹</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="nodejs-相关进阶"><a href="#nodejs-相关进阶" class="headerlink" title="nodejs 相关进阶"></a>nodejs 相关进阶</h2><p>  nodejs 底层理解, nodejs 加载 C/C++ addon, 全栈<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* nodejs 权威指南</span><br><span class="line">* web 全栈工程师的自我修养</span><br><span class="line">* C Primer Plus(第五版)</span><br><span class="line">* C++ Primer中文版</span><br></pre></td></tr></table></figure></p><h2 id="架构设计-amp-软件工程相关"><a href="#架构设计-amp-软件工程相关" class="headerlink" title="架构设计&amp;软件工程相关"></a>架构设计&amp;软件工程相关</h2><p>  web 架构设计, 软件工程管理<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 人月神话</span><br><span class="line">* 程序之美系列(架构之美, 安全之美, 数据之美)</span><br><span class="line">* 大型网站技术架构: 核心原理与案例分析</span><br></pre></td></tr></table></figure></p><h2 id="七周系列"><a href="#七周系列" class="headerlink" title="七周系列"></a>七周系列</h2><p>  七周相关经典<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 七周七语言</span><br><span class="line">* 七周七并发模型</span><br><span class="line">* 七周七数据库</span><br><span class="line">* 七周七 web 开发框架</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年新年读书计划, 准备深入学习JavaScript 的前端和后端开发, 大致了解一下 web 开发周围的相关知识.&lt;/p&gt;
&lt;h2 id=&quot;网络相关&quot;&gt;&lt;a href=&quot;#网络相关&quot; class=&quot;headerlink&quot; title=&quot;网络相关&quot;&gt;&lt;/a&gt;网络相关&lt;/h2&gt;&lt;p&gt;  http 协议的深入了解, nginx 开发相关, web 安全相关&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 图解 http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* http 权威指南&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 跟我学 Nginx + Lua 开发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Programming in Lua 3ed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 白帽子讲 web 安全&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;web-前端相关&quot;&gt;&lt;a href=&quot;#web-前端相关&quot; class=&quot;headerlink&quot; title=&quot;web 前端相关&quot;&gt;&lt;/a&gt;web 前端相关&lt;/h2&gt;&lt;p&gt;  html&amp;amp;css 深入理解, bootstrap 框架, JavaScript 深入学习&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* html5 与 css3 基础教程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* css 禅意花园&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* css 权威指南&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 深入理解 bootstrap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* JavaScript 高级程序设计(第三版)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* JavaScript 启示录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* JavaScript 语言精粹&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://blog.github.pub/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
</feed>
